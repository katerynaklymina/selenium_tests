// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.support.ui.*;

import java.util.function.Function;
import java.util.function.Predicate;

import java.util.concurrent.TimeUnit;


public class SeleniumHomeworkTwo {
    private WebDriver driver;

    public static final Dimension browserWindowSize = new Dimension(1280, 900);

    public static final String PATH_MOZ_DRIVER = "D:\\projects\\selenium\\drivers\\geckodriver.exe";
    public static final String PATH_CHROME_DRIVER = "D:\\projects\\selenium\\drivers\\chromedriver.exe";
    public static final String PATH_IE_DRIVER = "D:\\projects\\selenium\\drivers\\IEDriverServer.exe";


    public SeleniumHomeworkTwo() {
        System.setProperty("webdriver.chrome.driver", SeleniumHomeworkTwo.PATH_CHROME_DRIVER);
        System.setProperty("webdriver.gecko.driver", SeleniumHomeworkTwo.PATH_MOZ_DRIVER);
        System.setProperty("webdriver.ie.driver", SeleniumHomeworkTwo.PATH_IE_DRIVER);
    }


    @Before
    public void setUp() {
        //
    }

    @After
    public void tearDown() {
        driver.quit();
    }

    @Test
    public void chormeTest() {
        driver = new ChromeDriver();
        commonTest();
    }

    @Test
    public void firefoxTest() {
        driver = new FirefoxDriver();
        commonTest();
    }

    @Test
    public void ieTest() {
        driver = new InternetExplorerDriver();
        commonTest();
    }

    public void commonTest() {

        JavascriptExecutor js = (JavascriptExecutor) driver;

        // Set implicit timeout
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        
        // 1. Navigate to URL
        driver.get("http://localhost:8888");
        driver.manage().window().setSize(browserWindowSize);

        // Product link on main page
        WebElement mpProductLink = driver.findElement(By.cssSelector("section#box-campaign-products .product-column a[data-id=\"1\"].link"));
        WebElement mpRegPriceElem = mpProductLink.findElement(By.cssSelector("div.info .price-wrapper > .regular-price"));
        WebElement mpCampaignPriceElem = mpProductLink.findElement(By.cssSelector("div.info .price-wrapper > .campaign-price"));
        
        // 4.1 Getting the name of the product ON MAIN PAGE
        String mpProductText = mpProductLink.findElement(By.cssSelector("div.info > .name")).getText();
        String mpRegPriceValue = mpRegPriceElem.getText();
        String mpRegPriceDecor = mpRegPriceElem.getCssValue("text-decoration");
        String mpRegPriceColor = mpRegPriceElem.getCssValue("color");
        String mpCampaignPriceValue = mpCampaignPriceElem.getText();
        String mpCampaignPriceColor = mpCampaignPriceElem.getCssValue("color");

        js.executeScript("arguments[0].scrollIntoView(true);", mpProductLink);


        // Wait for element to be scrolled into view
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }


        // 4/a. Click the FIRST product on the main page
        Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
                .withTimeout(30, TimeUnit.SECONDS)
                .pollingEvery(1, TimeUnit.SECONDS);

//        wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("section#box-campaign-products .product-column a[data-id=\"1\"].link")));

        wait.until(ExpectedConditions.elementToBeClickable(mpProductLink));


        System.err.println(String.format("tag: %s; displayed: %s; enabled: %s%n",
                mpProductLink.getTagName(),
                mpProductLink.isDisplayed(),
                mpProductLink.isEnabled()
        ));

        mpProductLink.click();

        // 4/a. Click the FIRST product on the item page
        String ipText = driver.findElement(By.cssSelector("#box-product[data-id=\"1\"] h1.title")).getText();

        WebElement ipRegPriceElem = driver.findElement(By.cssSelector("article#box-product .price-wrapper > .regular-price"));
        WebElement ipCampaignPriceElem = driver.findElement(By.cssSelector("article#box-product .price-wrapper > .campaign-price"));

        String ipRegPriceValue = ipRegPriceElem.getText();
        String ipRegPriceDecor = ipRegPriceElem.getCssValue("text-decoration");
        String ipRegPriceColor = ipRegPriceElem.getCssValue("color");
        String ipCampaignPriceValue = ipCampaignPriceElem.getText();
        String ipCampaignPriceColor = ipCampaignPriceElem.getCssValue("color");

        // ASSERTIONS

        // Product name text on both pages
        assertEquals(mpProductText, ipText);

        // Product prices on both pages
        assertFalse(mpRegPriceValue.isEmpty());

        assertFalse(ipCampaignPriceValue.isEmpty());

        assertEquals(mpRegPriceValue, ipRegPriceValue);

        assertEquals(mpCampaignPriceValue, ipCampaignPriceValue);

        assertTrue(mpRegPriceDecor.contains("line-through"));

        assertTrue(ipRegPriceDecor.contains("line-through"));

        System.err.println(String.format("Regular price colour on Main Page is: %s%nRegular price colour on Item Page is: %s", mpRegPriceColor, ipRegPriceColor));

        System.err.println(String.format("Campaign price colour on Main Page is: %s%nCampaign price colour on Item Page is: %s", mpCampaignPriceColor, ipCampaignPriceColor));
    }
}
