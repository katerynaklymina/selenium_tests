// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.util.concurrent.TimeUnit;


public class SeleTest {
  private WebDriver driver;
  private JavascriptExecutor js;
  public static final Dimension browserWindowSize = new Dimension(1280, 960);

  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;

  }
  @After
  public void tearDown() {
    driver.quit();
  }

  @Test
  public void sele() {
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

    // 1. Navigate to URL
    driver.get("http://demo.litecart.net/");
    driver.manage().window().setSize(browserWindowSize);

    // 4.1 Getting the name of the product ON MAIN PAGE
    String mainPageText = driver.findElement(By.cssSelector("section#box-campaign-products .product-column a[data-id=\"1\"].link div.info > .name")).getText();


    WebElement mpRegPriceElem = driver.findElement(By.cssSelector("section#box-campaign-products .product-column a[data-id=\"1\"].link div.info .price-wrapper > .regular-price"));
    WebElement mpCampaignPriceElem = driver.findElement(By.cssSelector("section#box-campaign-products .product-column a[data-id=\"1\"].link div.info .price-wrapper > .campaign-price"));

    String mpRegPriceValue = mpRegPriceElem.getText();
    String mpRegPriceDecor = mpRegPriceElem.getCssValue("text-decoration");
    String mpRegPriceColor = mpRegPriceElem.getCssValue("color");


    String mpCampaignPriceValue = mpCampaignPriceElem.getText();
    String mpRegPriceDecor = mpCampaignPriceElem.getCssValue("text-decoration");
    String mpRegPriceColor = mpCampaignPriceElem.getCssValue("color");


    // 4/a. Click the FIRST product on the main page
    driver.findElement(By.cssSelector("section#box-campaign-products .product-column a[data-id=\"1\"].link")).click();

    // TODO: Develop things below this point
    // 4/a. Click the FIRST product on the item page
    String itemPageText = driver.findElement(By.cssSelector("#box-product[data-id=\"1\"] h1.title")).getText();

    assertEquals(mainPageText, itemPageText);
    assertTrue(mpRegPriceDecor.contains("line-through"));
    System.err.println("Main page: Regular price text colour: " + mpRegPriceColor);


//    System.err.println("Text on main page is: " + mainPageText);
//
//    WebElement strvalue = driver.findElement(By.cssSelector("#box-product > div.row > div.col-sm-8.col-md-6 > h1"));
//    String expected = "Yellow Duck";
//    String actual = strvalue.getText();
//    assertEquals(expected, actual);


  }
}
